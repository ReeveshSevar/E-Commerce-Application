package com.sevar.order.controller;

import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.sevar.order.dto.OrderRequest;
import com.sevar.order.model.Order;
import com.sevar.order.service.OrderService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;
import io.github.resilience4j.timelimiter.annotation.TimeLimiter;

@RestController
@RequestMapping("/order")
public class OrderController {
	
	@Autowired
	private OrderService orderService;
	
	
	
	@GetMapping("/users/{id}")
	public ResponseEntity<List<Order>> getRatingByUserId(@PathVariable Integer id)
	{
		return ResponseEntity.ok(orderService.getOrderByUserId(id));
	}
	
	
	
	@PostMapping("/reg")
	@CircuitBreaker(name = "inventory", fallbackMethod = "fallBackMethod")
	@TimeLimiter(name = "inventory")
	@Retry(name = "inventory")
	public CompletableFuture<String> placeOrder(@RequestBody OrderRequest orderRequest)
	{
		System.err.println(orderRequest);
		return CompletableFuture.supplyAsync(() -> orderService.placeOrder(orderRequest));
	}
	
	public CompletableFuture<String> fallBackMethod(OrderRequest orderRequest , RuntimeException exception)
	{
		return  CompletableFuture.supplyAsync(() -> "Oops!! Something Went Wrong, Please Order After Sometimes!"); 
	}
	
}
